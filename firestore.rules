rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // --- Helper Functions ---
    function isAuthenticated() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return isAuthenticated() && request.auth.uid == userId;
    }

    function isAdmin() {
      // IMPORTANT: Replace with your actual admin UID or use custom claims for production
      // Ensure request.auth is not null before accessing request.auth.uid
      return isAuthenticated() && request.auth.uid == 'QgyeVb3LUgWOkMrakhCUgb5ZtwN2';
    }

    function isTimestampOrNull(value) {
      return value == null || value is timestamp;
    }

    function isStringOrNull(value) {
      return value == null || value is string;
    }

    function isNumberOrNull(value) {
      return value == null || value is number;
    }

    // Validates the incoming data for a new user document
    function isValidNewUserDocument(data, request) {
      return data.keys().hasAll([
               'balance', 'tapCountToday', 'lastTapDate', 'currentEnergy', 'maxEnergy',
               'tapPower', 'lastEnergyUpdate', 'boostLevels', 'lastLoginBonusClaimed',
               'referredBy', 'createdAt', 'name', 'email', 'photoURL', 'photoStoragePath',
               'completedAchievements', 'referralsMadeCount', 'activeTheme', 'unlockedThemes',
               'frenzyEndTime', 'frenzyMultiplier', 'energySurgeEndTime'
             ]) &&
             (data.balance == 0 || (data.balance is number && data.balance > 0)) && // Initial balance 0 or from referral
             data.tapCountToday == 0 &&
             data.lastTapDate is string && // Should be toDateString() output
             data.currentEnergy is number && data.currentEnergy >= 0 &&
             data.maxEnergy is number && data.maxEnergy > 0 &&
             data.currentEnergy <= data.maxEnergy && // Initial currentEnergy can be up to maxEnergy
             data.tapPower is number && data.tapPower > 0 &&
             data.lastEnergyUpdate == request.time && // Must be server timestamp
             data.boostLevels is map &&
             isTimestampOrNull(data.lastLoginBonusClaimed) &&
             isStringOrNull(data.referredBy) &&
             data.createdAt == request.time && // Must be server timestamp
             data.name is string && data.name.size() > 0 &&
             data.email == request.auth.token.email &&
             isStringOrNull(data.photoURL) &&
             isStringOrNull(data.photoStoragePath) &&
             data.completedAchievements is map &&
             data.referralsMadeCount == 0 &&
             data.activeTheme is string &&
             data.unlockedThemes is list && data.unlockedThemes.size() >= 1 &&
             isTimestampOrNull(data.frenzyEndTime) &&
             isNumberOrNull(data.frenzyMultiplier) &&
             isTimestampOrNull(data.energySurgeEndTime);
    }

    // --- Users Collection (`/users/{userId}`) ---
    match /users/{userId} {

      // CREATE: New users can create their own document, validating all fields.
      allow create: if isOwner(userId) && isValidNewUserDocument(request.resource.data, request);

      // READ (GET & LIST):
      allow get: if isAuthenticated() && (
                   isOwner(userId) ||  // Owner can read their full document
                   isAdmin() ||        // Admin can read any user document
                   // For public profile views (e.g. part of leaderboard check)
                   // Document must have at least 'name' (string) and 'balance' (number) to be publicly readable by other authenticated users.
                   (resource.data.keys().hasAll(['name', 'balance']) &&
                    resource.data.name is string &&
                    resource.data.balance is number)
                 );
      // Authenticated users can perform list queries (like leaderboard).
      // The `get` rule above will then be checked for each document the query attempts to return.
      allow list: if isAuthenticated();

      // UPDATE: Users can update their own data; Admins can update any user data.
      allow update: if isAuthenticated() &&
                       ( (isOwner(userId) &&
                           // User cannot change their email, createdAt, or referralsMadeCount directly
                           request.resource.data.email == resource.data.email &&
                           request.resource.data.createdAt == resource.data.createdAt &&
                           request.resource.data.referralsMadeCount == resource.data.referralsMadeCount &&
                           // Allow other game-related fields to be updated by the user
                           // Balance, tapPower, maxEnergy, currentEnergy updates should be handled carefully
                           // Ideally through server-side logic, but rules allow client updates for now.
                           // photoURL, photoStoragePath, activeTheme, unlockedThemes, name can be updated.
                           // boostLevels, completedAchievements, lastTapDate, lastEnergyUpdate, lastLoginBonusClaimed
                           // frenzyEndTime, frenzyMultiplier, energySurgeEndTime can be updated by game logic.
                           // Ensure `updatedAt` is set if you track it: request.resource.data.updatedAt == request.time
                           true
                         ) ||
                         (isAdmin() &&
                           // Admin cannot change user's email or createdAt
                           request.resource.data.email == resource.data.email &&
                           request.resource.data.createdAt == resource.data.createdAt
                           // Admin can modify other fields like balance, name, etc.
                         )
                       );

      // DELETE: User can delete own account (for reset); Admin can delete any.
      allow delete: if isAuthenticated() && (isOwner(userId) || isAdmin());
    }

    // --- Transactions Collection (`/transactions/{transactionId}`) ---
    match /transactions/{transactionId} {
      // READ: User can read their own transactions; Admin can read any.
      allow read: if isAuthenticated() && (isOwner(resource.data.userId) || isAdmin());

      // CREATE: User can create their own transactions; Admin can create any.
      allow create: if isAuthenticated() &&
                       ( (isOwner(request.resource.data.userId) &&
                          request.resource.data.date == request.time && // Server timestamp for creation
                          request.resource.data.amount is number &&
                          request.resource.data.type is string &&
                          request.resource.data.status is string &&
                          (request.resource.data.status == 'pending' || request.resource.data.status == 'completed') &&
                          // Optional: Validate inrAmount if present
                          (request.resource.data.keys().has('inrAmount') ? request.resource.data.inrAmount is number : true) &&
                          // Optional: Validate paymentMethod if present
                          (request.resource.data.keys().has('paymentMethod') ? request.resource.data.paymentMethod is string : true) &&
                          // Optional: Validate paymentDetails if present
                          (request.resource.data.keys().has('paymentDetails') ? request.resource.data.paymentDetails is map : true) &&
                           // Optional: Validate details if present
                          (request.resource.data.keys().has('details') ? request.resource.data.details is string : true) &&
                          // Optional: Validate relatedUserId if present
                          (request.resource.data.keys().has('relatedUserId') ? request.resource.data.relatedUserId is string : true) &&
                          // Optional: Validate relatedUserName if present
                          (request.resource.data.keys().has('relatedUserName') ? request.resource.data.relatedUserName is string : true)
                         ) || isAdmin() );

      // UPDATE: Only Admins can update transactions (e.g., status of redeem request).
      allow update: if isAuthenticated() && isAdmin() &&
                       // Prevent changing core immutable fields
                       request.resource.data.userId == resource.data.userId &&
                       request.resource.data.amount == resource.data.amount &&
                       request.resource.data.type == resource.data.type &&
                       request.resource.data.date == resource.data.date && // Creation date immutable
                       // Allow status and adminNotes (if you add it) to be changed.
                       // Ensure 'updatedAt' is set by the admin on update.
                       request.resource.data.updatedAt == request.time;

      // DELETE: Generally, transactions should not be deleted. Only by admin in rare cases.
      allow delete: if isAuthenticated() && isAdmin();
    }

    // --- FAQs Collection (`/faqs/{faqId}`) ---
    match /faqs/{faqId} {
      allow read: if true; // Everyone can read FAQs
      allow write: if isAuthenticated() && isAdmin(); // Admin can CRUD
    }

    // --- Marquee Items Collection (`/marquee_items/{itemId}`) ---
    match /marquee_items/{itemId} {
      allow read: if true; // Everyone can read marquee items
      allow write: if isAuthenticated() && isAdmin(); // Admin can CRUD
    }

    // --- User Quests (`/user_quests/{userId}` and subcollection `/user_quests/{userId}/daily_quests/{questId}`) ---
    match /user_quests/{userId} {
      // User can manage their own top-level quest document (e.g., lastQuestRefresh, activeDailyQuestIds)
      allow read, write, delete: if isOwner(userId);
      // allow get: if isAdmin(); // Optional: Admin read access for support.
    }
    match /user_quests/{userId}/daily_quests/{questId} {
      // User can manage their individual daily quest progress, completion, and claims.
      allow read, write, delete: if isOwner(userId);
      // allow get: if isAdmin(); // Optional: Admin read access for support.
    }

    // --- Support Tickets (`/support_tickets/{ticketId}`) ---
    match /support_tickets/{ticketId} {
      // READ: User can read their own tickets; Admin can read any.
      allow read: if isAuthenticated() && (isOwner(resource.data.userId) || isAdmin());

      // CREATE: Authenticated users can create their own support tickets.
      allow create: if isAuthenticated() &&
                       isOwner(request.resource.data.userId) &&
                       request.resource.data.createdAt == request.time && // Server timestamp for creation
                       request.resource.data.status == 'open' && // Initial status must be 'open'
                       request.resource.data.category is string &&
                       request.resource.data.description is string &&
                       request.resource.data.userEmail == request.auth.token.email &&
                       request.resource.data.userName is string;

      // UPDATE: Only admins can update support tickets (e.g., change status, add response).
      allow update: if isAuthenticated() && isAdmin() &&
                       // Prevent changing owner or creation time
                       request.resource.data.userId == resource.data.userId &&
                       request.resource.data.createdAt == resource.data.createdAt &&
                       // Admin can update status, adminResponse, and must set updatedAt
                       request.resource.data.updatedAt == request.time;

      // DELETE: Generally, support tickets shouldn't be deleted by users. Admins might.
      allow delete: if isAuthenticated() && isAdmin();
    }
  }
}

    