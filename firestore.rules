
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Users Collection
    // Users can read and write their own document.
    // Authenticated users can create their own user document.
    // Authenticated users can list/query the users collection (needed for leaderboard).
    match /users/{userId} {
      allow read, update, delete: if request.auth != null && request.auth.uid == userId;
      allow create: if request.auth != null && request.auth.uid == userId;
    }
    // Allow authenticated users to query the collection for leaderboard.
    // This is a broad read access. For production, you might restrict fields
    // or use Cloud Functions for more granular control over what data is exposed.
    match /users/{document=**} {
      allow list: if request.auth != null;
    }

    // Transactions Collection
    // Users can create transactions for themselves.
    // Users can read their own transactions.
    match /transactions/{transactionId} {
      allow read: if request.auth != null && request.auth.uid == resource.data.userId;
      allow create: if request.auth != null && request.auth.uid == request.resource.data.userId;
      // Update/delete typically handled by server/admin, not client directly for completed transactions.
    }

    // FAQs Collection
    // Authenticated users can read FAQs.
    // Creating/updating FAQs would typically be an admin function.
    match /faqs/{faqId} {
      allow read: if request.auth != null;
      // allow write: if <condition_for_admin_users>; // Example for admin
    }

    // User Quests Collection
    // Users can read and write their own quest data.
    match /user_quests/{userId} {
      allow read, write: if request.auth != null && request.auth.uid == userId;
    }
    match /user_quests/{userId}/daily_quests/{questId} {
      allow read, write: if request.auth != null && request.auth.uid == userId;
    }

    // Support Tickets Collection
    // Users can create their own support tickets.
    // Users can read/update their own tickets (e.g., to add comments or see status).
    // Admins would have broader access (not defined here, add as needed).
    match /support_tickets/{ticketId} {
      allow create: if request.auth != null && request.auth.uid == request.resource.data.userId;
      allow read, update: if request.auth != null && request.auth.uid == resource.data.userId;
      // allow read, update, delete: if <condition_for_admin_users>; // Example for admin
    }

    // Add rules for other collections if you have them (e.g., admin-specific data).
  }
}
