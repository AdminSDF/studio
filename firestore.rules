
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper function to check if the request is from an admin.
    // For production with multiple admins, consider using Firebase Auth custom claims:
    // function isAdmin() {
    //   return request.auth.token.admin == true;
    // }
    function isAdmin() {
      // REPLACE 'QgyeVb3LUgWOkMrakhCUgb5ZtwN2' with your actual admin Firebase UID if different.
      // For multiple admins, use: request.auth.uid in ['ADMIN_UID_1', 'ADMIN_UID_2'];
      return request.auth.uid == 'QgyeVb3LUgWOkMrakhCUgb5ZtwN2';
    }

    // Helper function to check if the user is authenticated.
    function isAuthenticated() {
      return request.auth != null;
    }

    // Helper function to check if the user owns the document.
    function isOwner(userId) {
      return isAuthenticated() && request.auth.uid == userId;
    }

    // Users Collection (/users/{userId})
    match /users/{userId} {
      // READ:
      // - Admins can read any user document.
      // - Authenticated users can read their own full document.
      // - Authenticated users can read specific public fields of OTHER users (for profiles, leaderboard).
      allow get: if isAuthenticated(); // Allows targeted document reads if more specific conditions below are met
      allow list: if isAuthenticated(); // Allows queries (e.g., for leaderboard) if conditions in query/rules met

      allow read: if isAuthenticated() && (
                    isOwner(userId) || // User can read all their own data
                    isAdmin() || // Admin can read any user data
                    // Public read for specific fields needed for leaderboards/profiles
                    (resource.data.keys().hasAll(['name', 'balance', 'photoURL', 'referralsMadeCount', 'activeTheme']))
                  );

      // CREATE:
      // - New users can create their own document upon registration.
      // Ensure this matches EXACTLY what register-form.tsx (newUserDoc) sends.
      allow create: if isOwner(userId) &&
                    request.resource.data.name is string &&
                    request.resource.data.email == request.auth.token.email &&
                    (request.resource.data.balance == 0 || request.resource.data.balance > 0) && // Allows for referral bonus
                    request.resource.data.tapCountToday == 0 &&
                    request.resource.data.lastTapDate is string && // Set by client
                    request.resource.data.currentEnergy == request.resource.data.maxEnergy &&
                    request.resource.data.maxEnergy is number && request.resource.data.maxEnergy > 0 &&
                    request.resource.data.tapPower is number && request.resource.data.tapPower > 0 &&
                    request.resource.data.lastEnergyUpdate == request.time &&
                    request.resource.data.createdAt == request.time &&
                    request.resource.data.boostLevels is map && request.resource.data.boostLevels.size() == 0 &&
                    request.resource.data.unlockedThemes is list && request.resource.data.unlockedThemes.size() > 0 && // Default theme
                    request.resource.data.activeTheme is string &&
                    (request.resource.data.lastLoginBonusClaimed == null) && // Initially null
                    (request.resource.data.referredBy == null || request.resource.data.referredBy is string) &&
                    (request.resource.data.photoURL == null) && // Initially null
                    (request.resource.data.photoStoragePath == null) && // Initially null
                    request.resource.data.completedAchievements is map && request.resource.data.completedAchievements.size() == 0 &&
                    request.resource.data.referralsMadeCount == 0 &&
                    (request.resource.data.frenzyEndTime == null) && // Initially null
                    (request.resource.data.frenzyMultiplier == null) && // Initially null
                    (request.resource.data.energySurgeEndTime == null) && // Initially null
                    // Ensure only expected fields are present on creation
                    request.resource.data.keys().hasOnly([
                        'name', 'email', 'balance', 'tapCountToday', 'lastTapDate', 'currentEnergy',
                        'maxEnergy', 'tapPower', 'lastEnergyUpdate', 'createdAt', 'boostLevels',
                        'unlockedThemes', 'activeTheme', 'lastLoginBonusClaimed', 'referredBy',
                        'photoURL', 'photoStoragePath', 'completedAchievements', 'referralsMadeCount',
                        'frenzyEndTime', 'frenzyMultiplier', 'energySurgeEndTime'
                    ]);

      // UPDATE:
      // - Users can update specific fields of their own document.
      // - Admins can update specific fields of any user document.
      allow update: if isAuthenticated() && (
                      ( // User updating their own document
                        isOwner(userId) &&
                        request.resource.data.email == resource.data.email && // Email cannot be changed by user
                        request.resource.data.createdAt == resource.data.createdAt && // Creation time cannot be changed
                        // Allow updates to fields modified by game logic or profile edits
                        // Ensure request.resource.data for sensitive fields is validated if possible (e.g., balance only increases by expected amounts)
                        // For now, allowing direct client updates to these fields as per AppStateProvider
                        request.resource.data.keys().hasOnly(
                          resource.data.keys().concat(request.resource.data.diff(resource.data).affectedKeys()) // Ensures no fields are removed, only added/updated
                        ) &&
                        // Prevent user from directly setting admin-controlled or one-time fields unless it's the admin
                        (request.auth.uid == userId && !('referralsMadeCount' in request.resource.data.diff(resource.data).affectedKeys())) &&
                        (request.auth.uid == userId && !('referredBy' in request.resource.data.diff(resource.data).affectedKeys()))
                      ) ||
                      ( // Admin updating any user document
                        isAdmin() &&
                        request.resource.data.email == resource.data.email && // Admin also cannot change email
                        request.resource.data.createdAt == resource.data.createdAt // Admin also cannot change createdAt
                        // Admin can update other fields like balance (for corrections), name, etc.
                      )
                    );

      // DELETE:
      // - Users can delete their own document (for account reset).
      // - Admins can delete any user document.
      allow delete: if isAuthenticated() && (isOwner(userId) || isAdmin());
    }

    // Transactions Collection (/transactions/{transactionId})
    match /transactions/{transactionId} {
      allow read: if isAuthenticated() && (resource.data.userId == request.auth.uid || isAdmin());

      allow create: if isAuthenticated() &&
                      (
                        ( // User creating their own transaction
                          request.resource.data.userId == request.auth.uid &&
                          request.resource.data.date == request.time &&
                          request.resource.data.amount is number && // Allow negative for costs, positive for earnings
                          request.resource.data.type is string &&
                          request.resource.data.status is string &&
                          (request.resource.data.status == 'pending' || request.resource.data.status == 'completed') &&
                          request.resource.data.keys().hasAll(['userId', 'amount', 'type', 'status', 'date']) // Minimum required
                        ) ||
                        isAdmin() // Admin can create any transaction
                      );

      allow update: if isAuthenticated() && isAdmin() &&
                      request.resource.data.diff(resource.data).affectedKeys().hasOnly(['status', 'adminNotes', 'updatedAt']) &&
                      request.resource.data.updatedAt == request.time;

      allow delete: if isAuthenticated() && isAdmin();
    }

    // FAQs Collection (/faqs/{faqId})
    match /faqs/{faqId} {
      allow read: if true; // Everyone can read FAQs
      allow write: if isAuthenticated() && isAdmin();
    }

    // User Quests Data Structure
    // Parent document: /user_quests/{userId}
    // Subcollection: /user_quests/{userId}/daily_quests/{questId}
    match /user_quests/{userId} {
      // User can read/write their own top-level quest document (e.g., lastQuestRefresh, activeDailyQuestIds)
      allow read, write: if isOwner(userId);
      // Admin read access for support:
      // allow read: if isAuthenticated() && (isOwner(userId) || isAdmin());
    }

    match /user_quests/{userId}/daily_quests/{questId} {
      // User can read/write their individual quest progress documents
      allow read, write: if isOwner(userId);
      // Admin read access for support:
      // allow read: if isAuthenticated() && (isOwner(userId) || isAdmin());
    }

    // Support Tickets (/support_tickets/{ticketId})
    match /support_tickets/{ticketId} {
      allow read: if isAuthenticated() && (resource.data.userId == request.auth.uid || isAdmin());

      allow create: if isAuthenticated() &&
                      request.resource.data.userId == request.auth.uid &&
                      request.resource.data.createdAt == request.time &&
                      request.resource.data.status == 'open' &&
                      request.resource.data.category is string &&
                      request.resource.data.description is string &&
                      request.resource.data.userEmail == request.auth.token.email &&
                      request.resource.data.userName is string;

      allow update: if isAuthenticated() && isAdmin() &&
                      request.resource.data.userId == resource.data.userId &&
                      request.resource.data.createdAt == resource.data.createdAt &&
                      request.resource.data.diff(resource.data).affectedKeys().hasAny(['status', 'adminResponse', 'updatedAt']) &&
                      request.resource.data.updatedAt == request.time;

      allow delete: if isAuthenticated() && isAdmin();
    }

    // Marquee Items (/marquee_items/{itemId})
    match /marquee_items/{itemId} {
      allow read: if true; // Everyone can read marquee items
      allow write: if isAuthenticated() && isAdmin(); // Only admin can create/update/delete
    }

    // Default Deny for any other paths not explicitly matched above.
    match /{allPaths=**} {
      allow read, write: if false;
    }
  }
}

    