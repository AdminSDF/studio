
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper Functions
    function isAuthenticated() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    function isAdmin() {
      // IMPORTANT: Replace with your actual admin UID or use custom claims for multiple admins
      return request.auth.uid == 'QgyeVb3LUgWOkMrakhCUgb5ZtwN2';
    }

    function isTimestampOrNull(value) {
      return value == null || value is timestamp;
    }

    function isDateOrNull(value) {
      return value == null || value is timestamp; // Firestore represents dates as timestamps
    }
    
    function isStringOrNull(value) {
      return value == null || value is string;
    }

    function isNumberOrNull(value) {
      return value == null || value is number;
    }
    
    function isMapOrNull(value) {
      return value == null || value is map;
    }

    function isIncomingValidUserData(data) {
      return data.name is string && data.name.size() > 0 && data.name.size() <= 50
          && data.email is string && data.email.matches('.+@.+\\..+') // Basic email format
          && data.balance is number && data.balance >= 0
          && data.tapCountToday is number && data.tapCountToday >= 0
          && data.lastTapDate is string // Or timestamp, adjust based on client
          && data.currentEnergy is number && data.currentEnergy >= 0
          && data.maxEnergy is number && data.maxEnergy > 0
          && data.tapPower is number && data.tapPower > 0
          && data.lastEnergyUpdate is timestamp // Should be serverTimestamp() or client-sent Timestamp
          && data.boostLevels is map
          && isTimestampOrNull(data.lastLoginBonusClaimed)
          && isStringOrNull(data.referredBy)
          && data.createdAt is timestamp // Should be serverTimestamp() or client-sent Timestamp
          && isStringOrNull(data.photoURL)
          && isStringOrNull(data.photoStoragePath)
          && data.completedAchievements is map
          && data.referralsMadeCount is number && data.referralsMadeCount >= 0
          && data.activeTheme is string
          && data.unlockedThemes is list
          && isTimestampOrNull(data.frenzyEndTime)
          && isNumberOrNull(data.frenzyMultiplier)
          && isTimestampOrNull(data.energySurgeEndTime);
    }
    
    function isPublicUserProfile(userData) {
        // For leaderboard, we need at least 'name' and 'balance'.
        // 'photoURL' is optional but nice.
        return userData.keys().hasAll(['name', 'balance']) &&
               userData.name is string &&
               userData.balance is number &&
               (userData.keys().has('photoURL') ? (userData.photoURL == null || userData.photoURL is string) : true);
    }

    // Users Collection
    match /users/{userId} {
      allow create: if isAuthenticated() && isOwner(userId)
                    && request.resource.data.email == request.auth.token.email
                    && request.resource.data.keys().hasOnly([
                        'name', 'email', 'balance', 'tapCountToday', 'lastTapDate', 
                        'currentEnergy', 'maxEnergy', 'tapPower', 'lastEnergyUpdate', 
                        'boostLevels', 'lastLoginBonusClaimed', 'referredBy', 'createdAt', 
                        'photoURL', 'photoStoragePath', 'completedAchievements', 'referralsMadeCount', 
                        'activeTheme', 'unlockedThemes', 'frenzyEndTime', 'frenzyMultiplier', 'energySurgeEndTime'
                      ])
                    && isIncomingValidUserData(request.resource.data)
                    && request.resource.data.createdAt == request.time // Ensure server timestamp for createdAt
                    && request.resource.data.lastEnergyUpdate == request.time; // Ensure server timestamp

      allow get: if isAuthenticated() && (
                    isOwner(userId) || 
                    isAdmin() ||
                    isPublicUserProfile(resource.data) // For public profile views (leaderboard)
                  );

      allow list: if isAuthenticated(); // For leaderboard and admin user listing. Further checks on individual GETs.

      allow update: if isAuthenticated() && (isOwner(userId) || isAdmin())
                      // Fields an owner can update
                      && (isOwner(userId) ? 
                            request.resource.data.name == resource.data.name || request.resource.data.name is string
                            && request.resource.data.photoURL == resource.data.photoURL || isStringOrNull(request.resource.data.photoURL)
                            && request.resource.data.photoStoragePath == resource.data.photoStoragePath || isStringOrNull(request.resource.data.photoStoragePath)
                            && request.resource.data.activeTheme == resource.data.activeTheme || request.resource.data.activeTheme is string
                            && request.resource.data.balance is number // Balance updates by user
                            && request.resource.data.tapPower is number // Tap power updates by user
                            && request.resource.data.maxEnergy is number // Max energy updates by user
                            && request.resource.data.currentEnergy is number // Current energy updates by user
                            && request.resource.data.tapCountToday is number
                            && request.resource.data.lastTapDate is string
                            && request.resource.data.lastEnergyUpdate is timestamp
                            && request.resource.data.boostLevels is map
                            && request.resource.data.completedAchievements is map
                            && request.resource.data.unlockedThemes is list
                            && isTimestampOrNull(request.resource.data.frenzyEndTime)
                            && isNumberOrNull(request.resource.data.frenzyMultiplier)
                            && isTimestampOrNull(request.resource.data.energySurgeEndTime)
                            && isTimestampOrNull(request.resource.data.lastLoginBonusClaimed)
                            // Fields an owner CANNOT update directly
                            && request.resource.data.email == resource.data.email
                            && request.resource.data.createdAt == resource.data.createdAt
                            && request.resource.data.referredBy == resource.data.referredBy
                            && request.resource.data.referralsMadeCount == resource.data.referralsMadeCount
                         : true ) // Admin can update more fields
                      && (isAdmin() ? true : request.resource.data.email == resource.data.email) // Only admin can change email after creation if needed
                      && (isAdmin() ? true : request.resource.data.createdAt == resource.data.createdAt); // createdAt is immutable for user

      allow delete: if isAdmin(); // Only admin can delete user accounts
    }

    // Transactions Collection
    match /transactions/{transactionId} {
      allow create: if isAuthenticated() && request.resource.data.userId == request.auth.uid
                      && request.resource.data.date == request.time // Ensure server timestamp
                      && request.resource.data.amount is number
                      && request.resource.data.type is string
                      && request.resource.data.status is string && (request.resource.data.status == 'pending' || request.resource.data.status == 'completed')
                      && (request.resource.data.type != 'redeem' || (
                            request.resource.data.paymentMethod is string &&
                            request.resource.data.paymentDetails is map &&
                            request.resource.data.inrAmount is number
                          ));
      allow read: if isAuthenticated() && (isOwner(request.resource.data.userId) || isAdmin());
      allow list: if isAdmin(); // Or specific user queries if needed
      allow update: if isAdmin() // Only Admin can update transaction status (e.g. redeem requests)
                      && request.resource.data.userId == resource.data.userId // Cannot change original user
                      && request.resource.data.amount == resource.data.amount // Cannot change original amount
                      && request.resource.data.type == resource.data.type     // Cannot change original type
                      && request.resource.data.date == resource.data.date     // Cannot change original creation date
                      && request.resource.data.paymentMethod == resource.data.paymentMethod
                      && request.resource.data.paymentDetails == resource.data.paymentDetails
                      && request.resource.data.status is string && (request.resource.data.status == 'pending' || request.resource.data.status == 'completed' || request.resource.data.status == 'failed')
                      && request.resource.data.updatedAt == request.time; // Ensure server timestamp for updates
      allow delete: if isAdmin(); // Only admin can delete transactions (use with caution)
    }

    // Marquee Items Collection
    match /marquee_items/{itemId} {
      allow read: if isAuthenticated(); // All authenticated users can read
      allow list: if isAuthenticated();
      allow create, update, delete: if isAdmin()
                                    && (request.method == 'create' ? request.resource.data.createdAt == request.time : true)
                                    && (request.method == 'update' ? request.resource.data.updatedAt == request.time : true)
                                    && request.resource.data.text is string;
    }
    
    // FAQs Collection
    match /faqs/{faqId} {
      allow read: if isAuthenticated();
      allow list: if isAuthenticated();
      allow create, update, delete: if isAdmin()
                                    && request.resource.data.question is string
                                    && request.resource.data.answer is string
                                    && request.resource.data.category is string
                                    && request.resource.data.order is number;
    }

    // User Quests (Main document for metadata)
    match /user_quests/{userId} {
      allow read, create, update: if isAuthenticated() && isOwner(userId);
      // Admin can read if needed for support, but not typically modify directly
      allow get: if isAuthenticated() && (isOwner(userId) || isAdmin()); 
      allow list: if isAdmin();
    }

    // User Quests (Sub-collection for individual daily quests)
    match /user_quests/{userId}/daily_quests/{questId} {
      allow read, create, update: if isAuthenticated() && isOwner(userId)
                                    && request.resource.data.definition is map // Basic check
                                    && request.resource.data.progress is number
                                    && request.resource.data.completed is bool
                                    && request.resource.data.claimed is bool;
      // Admin can read if needed for support
      allow get: if isAuthenticated() && (isOwner(userId) || isAdmin());
    }
    
    // Support Tickets Collection
    match /support_tickets/{ticketId} {
      allow create: if isAuthenticated() 
                      && request.resource.data.userId == request.auth.uid
                      && request.resource.data.userName is string
                      && request.resource.data.userEmail is string
                      && request.resource.data.category is string
                      && request.resource.data.description is string
                      && request.resource.data.status == 'open' // Initial status
                      && request.resource.data.createdAt == request.time;
      allow read: if isAuthenticated() && (isOwner(request.resource.data.userId) || isAdmin());
      allow list: if isAdmin(); // Only admin can list all tickets
      allow update: if isAdmin()
                      && request.resource.data.userId == resource.data.userId // Cannot change original user
                      && request.resource.data.createdAt == resource.data.createdAt // Cannot change creation time
                      && request.resource.data.status is string
                      && (request.resource.data.keys().has('adminResponse') ? request.resource.data.adminResponse is string : true)
                      && request.resource.data.updatedAt == request.time;
      allow delete: if isAdmin();
    }

    // Admin Action Logs Collection
    match /admin_actions/{logId} {
      allow read: if isAdmin();
      allow list: if isAdmin();
      allow create: if isAdmin()
                      && request.resource.data.adminId == request.auth.uid
                      && request.resource.data.adminEmail is string
                      && request.resource.data.actionType is string
                      && request.resource.data.targetType is string
                      && request.resource.data.targetId is string
                      && request.resource.data.timestamp == request.time
                      && (request.resource.data.keys().has('details') ? 
                            (request.resource.data.details is map || request.resource.data.details is string) 
                            : true);
      allow update, delete: if false; // Logs should be immutable once created
    }

    // Default deny all other paths
    match /{document=**} {
      allow read, write: if false;
    }
  }
}
