
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper function to check if the request is from an admin.
    // For multiple admins or a more robust solution, consider using custom claims:
    // function isAdmin() { return request.auth.token.admin == true; }
    function isAdmin() {
      return request.auth.uid == 'QgyeVb3LUgWOkMrakhCUgb5ZtwN2'; // Ensure this is your admin UID
    }

    // Incoming data validation helper for user creation
    function isValidNewUser(data) {
      return data.name is string &&
             data.email == request.auth.token.email &&
             data.balance is number && // Initial balance (0 or referral bonus)
             data.tapCountToday == 0 &&
             data.currentEnergy is number && data.currentEnergy == data.maxEnergy &&
             data.maxEnergy is number &&
             data.tapPower is number &&
             data.lastEnergyUpdate == request.time &&
             data.createdAt == request.time &&
             data.boostLevels is map &&
             data.unlockedThemes is list && data.size(data.unlockedThemes) > 0 && // Must have at least default theme
             data.activeTheme is string &&
             data.photoURL == null && // Initial value
             data.photoStoragePath == null && // Initial value
             data.completedAchievements is map &&
             data.referralsMadeCount == 0 &&
             data.lastLoginBonusClaimed == null && // Initial value
             (data.referredBy == null || data.referredBy is string) &&
             data.frenzyEndTime == null && // Initial value
             data.frenzyMultiplier == null && // Initial value
             data.energySurgeEndTime == null; // Initial value
    }

    // Fields a user is allowed to update on their own document
    function userModifiableFields() {
      return [
        'name', 'photoURL', 'photoStoragePath', 'activeTheme', 'unlockedThemes',
        'balance', 'tapCountToday', 'lastTapDate', 'currentEnergy', 'maxEnergy', 'tapPower',
        'lastEnergyUpdate', 'boostLevels', 'lastLoginBonusClaimed',
        'completedAchievements', 'referralsMadeCount',
        'frenzyEndTime', 'frenzyMultiplier', 'energySurgeEndTime',
        'updatedAt' // Allow tracking updates
      ];
    }

    // Users Collection (/users/{userId})
    match /users/{userId} {
      allow get: if request.auth != null; // For reading own profile or admin reading
      allow list: if request.auth != null; // For leaderboard (further secured by read rules)

      allow read: if request.auth != null && (
                    (request.auth.uid == userId) || // User can read all their own data
                    isAdmin() || // Admin can read any user data
                    // Allow reading specific fields for public profiles/leaderboard if not own document
                    (resource.data.keys().hasAll(['name', 'balance', 'photoURL', 'referralsMadeCount', 'activeTheme']))
                  );

      allow create: if request.auth != null &&
                      request.auth.uid == userId &&
                      isValidNewUser(request.resource.data) &&
                      // Ensure no unexpected fields are written on creation
                      request.resource.data.keys().hasOnly(
                        ['name', 'email', 'balance', 'tapCountToday', 'lastTapDate', 'currentEnergy',
                         'maxEnergy', 'tapPower', 'lastEnergyUpdate', 'createdAt', 'boostLevels',
                         'unlockedThemes', 'activeTheme', 'photoURL', 'photoStoragePath',
                         'completedAchievements', 'referralsMadeCount', 'lastLoginBonusClaimed',
                         'referredBy', 'frenzyEndTime', 'frenzyMultiplier', 'energySurgeEndTime']
                      );

      allow update: if request.auth != null && (
                      ( // User updating their own document
                        request.auth.uid == userId &&
                        request.resource.data.email == resource.data.email && // Cannot change email
                        request.resource.data.createdAt == resource.data.createdAt && // Cannot change createdAt
                        // User can only update allowed fields
                        request.resource.data.diff(resource.data).affectedKeys().hasOnly(userModifiableFields())
                        // Add specific validation for sensitive fields if needed, e.g., balance changes must be small increments
                        // For example, to prevent large arbitrary balance changes by a user:
                        // && (request.resource.data.balance >= resource.data.balance || request.resource.data.balance == 0)
                        // && (request.resource.data.balance - resource.data.balance < 1000) // Arbitrary small increment
                      ) ||
                      ( // Admin updating any user document
                        isAdmin() &&
                        request.resource.data.email == resource.data.email && // Admin cannot change email
                        request.resource.data.createdAt == resource.data.createdAt // Admin cannot change createdAt
                        // Admin can update other fields (more permissive list or all non-critical)
                        // request.resource.data.diff(resource.data).affectedKeys().hasOnly(['name', 'balance', ...otherAdminEditableFields])
                      )
                    );

      allow delete: if request.auth != null && (request.auth.uid == userId || isAdmin()); // User reset or admin delete
    }

    // Transactions Collection (/transactions/{transactionId})
    match /transactions/{transactionId} {
      allow read: if request.auth != null && (resource.data.userId == request.auth.uid || isAdmin());

      allow create: if request.auth != null &&
                      (
                        ( // User creating their own transaction
                          request.resource.data.userId == request.auth.uid &&
                          request.resource.data.date == request.time &&
                          request.resource.data.amount is number && // Amount can be positive or negative (for costs)
                          request.resource.data.type is string &&
                          request.resource.data.status is string &&
                          (request.resource.data.status == 'pending' || request.resource.data.status == 'completed') &&
                          // Ensure userName and userEmail are set correctly, or not set by user
                          (!('userName' in request.resource.data) || request.resource.data.userName == request.auth.token.name) &&
                          (!('userEmail' in request.resource.data) || request.resource.data.userEmail == request.auth.token.email)
                        ) ||
                        (isAdmin() && request.resource.data.date == request.time) // Admin creating a transaction
                      );

      allow update: if request.auth != null && isAdmin() &&
                      // Allow admin to update specific fields like status or add notes
                      request.resource.data.diff(resource.data).affectedKeys().hasOnly(['status', 'adminNotes', 'updatedAt']) &&
                      request.resource.data.updatedAt == request.time;

      allow delete: if request.auth != null && isAdmin();
    }

    // FAQs Collection (/faqs/{faqId})
    match /faqs/{faqId} {
      allow read: if request.auth != null; // Allow authenticated users to read FAQs
      allow write: if request.auth != null && isAdmin(); // Only admin can CUD FAQs
    }

    // User Quests (/user_quests/{userId} and subcollection /user_quests/{userId}/daily_quests/{questId})
    match /user_quests/{userId} {
      allow read, write: if request.auth != null && (request.auth.uid == userId || isAdmin());
    }
    match /user_quests/{userId}/daily_quests/{questId} {
      allow read, write: if request.auth != null && (request.auth.uid == userId || isAdmin());
    }

    // Support Tickets (/support_tickets/{ticketId})
    match /support_tickets/{ticketId} {
      allow read: if request.auth != null && (resource.data.userId == request.auth.uid || isAdmin());
      allow create: if request.auth != null &&
                      request.resource.data.userId == request.auth.uid &&
                      request.resource.data.createdAt == request.time &&
                      request.resource.data.status == 'open' &&
                      request.resource.data.category is string &&
                      request.resource.data.description is string &&
                      request.resource.data.userName == request.auth.token.name &&
                      request.resource.data.userEmail == request.auth.token.email;
      allow update: if request.auth != null && isAdmin() &&
                      request.resource.data.userId == resource.data.userId &&
                      request.resource.data.createdAt == resource.data.createdAt &&
                      request.resource.data.diff(resource.data).affectedKeys().hasAny(['status', 'adminResponse', 'updatedAt']) &&
                      request.resource.data.updatedAt == request.time;
      allow delete: if request.auth != null && isAdmin();
    }

    // Marquee Items Collection (/marquee_items/{itemId})
    match /marquee_items/{itemId} {
      allow read: if request.auth != null; // Allow authenticated users to read marquee items
      allow write: if request.auth != null && isAdmin(); // Only admin can CUD marquee items
    }

    // Default Deny for any other paths not explicitly matched above.
    match /{allPaths=**} {
      allow read, write: if false;
    }
  }
}

    