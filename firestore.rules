
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Users Collection
    match /users/{userId} {
      // Authenticated users can create their own document
      allow create: if request.auth != null && request.auth.uid == userId;
      // Authenticated users can read, update, and delete their own document
      allow read, update, delete: if request.auth != null && request.auth.uid == userId;
      // Admins can read any user document (e.g., for admin panel user list)
      allow read: if request.auth != null && request.auth.token.admin == true;
      // Admins can update any user document (e.g., for banning, modifying balance - use with caution)
      allow update: if request.auth != null && request.auth.token.admin == true;
    }

    // Transactions Collection
    match /transactions/{transactionId} {
      // Users can create their own transactions
      allow create: if request.auth != null && request.auth.uid == request.resource.data.userId;
      // Users can read their own transactions
      allow read: if request.auth != null && request.auth.uid == resource.data.userId;
      // Admins can read any transaction (for admin panel)
      allow read: if request.auth != null && request.auth.token.admin == true;
      // Admins can update any transaction (e.g., to change status of redeem requests)
      allow update: if request.auth != null && request.auth.token.admin == true;
      // Deletion of transactions is generally not recommended, but can be added for admins if necessary
      // allow delete: if request.auth != null && request.auth.token.admin == true;
    }

    // FAQs Collection - Allow any authenticated user to read
    match /faqs/{faqId} {
      allow read: if request.auth != null;
      // Admin rules for CRUD (Create, Read, Update, Delete) on FAQs
      allow list, write: if request.auth != null && request.auth.token.admin == true;
    }

    // User Quests Collection
    match /user_quests/{userId} {
      // User can read/write their own main quest document
      allow read, write: if request.auth != null && request.auth.uid == userId;
      // Admins can read any user_quests document
      allow read: if request.auth != null && request.auth.token.admin == true;
    }
    match /user_quests/{userId}/daily_quests/{questId} {
      // User can read/write their own daily quest sub-documents
      allow read, write: if request.auth != null && request.auth.uid == userId;
      // Admins can read any daily_quests sub-document
      allow read: if request.auth != null && request.auth.token.admin == true;
    }

    // Support Tickets Collection
    match /support_tickets/{ticketId} {
      // Users can create their own support tickets
      allow create: if request.auth != null && request.auth.uid == request.resource.data.userId;
      // Users can read their own support tickets
      allow read: if request.auth != null && request.auth.uid == resource.data.userId;
      // Admins can read and update any support ticket
      allow read, update: if request.auth != null && request.auth.token.admin == true;
      // Admins can list all support tickets
      allow list: if request.auth != null && request.auth.token.admin == true;
    }
    
    // Marquee Messages Collection (if you implement this in Firestore)
    // match /marquee_messages/{messageId} {
    //   // Allow anyone (even unauthenticated users) to read marquee messages
    //   allow read: if true; 
    //   // Admins can create, update, delete marquee messages
    //   allow list, write: if request.auth != null && request.auth.token.admin == true;
    // }

    // Leaderboard (users collection read for all authenticated users)
    // Note: The rule `match /users/{userId} { allow read: if request.auth != null && request.auth.uid == userId; }`
    // allows users to read their own document.
    // For a leaderboard query that reads multiple user documents (e.g., top N users by balance),
    // you need a broader read rule for the 'users' collection or specific fields.
    // The `allow read: if request.auth != null && request.auth.token.admin == true;` rule under `users/{userId}` above
    // covers admin reads for the user list page.
    // If non-admin users need to see a leaderboard populated by querying 'users',
    // you'd add: `allow list: if request.auth != null;` to `match /users/{userId}`
    // or ensure your leaderboard query only reads non-sensitive, indexed fields.
    // For simplicity and if user profiles are not highly sensitive, a general read for authenticated users on `users` collection could be:
    // match /users/{document=**} {
    //   allow read: if request.auth != null;
    // }
    // However, this is very broad. It's better to rely on an admin generating this or Cloud Functions.
    // The current rules allow admins to read all users. If your app directly queries users for the leaderboard,
    // you will need to adjust rules to allow authenticated users to perform that specific query.
    // For instance, if leaderboard only needs 'name' and 'balance':
    // function isLeaderboardQuery() {
    //   return request.resource == null && request.method == 'list' && request.query.orderBy == 'balance' && request.query.limit <= 20;
    // }
    // match /users/{userId} {
    //   allow list: if request.auth != null && isLeaderboardQuery() && request.auth.uid != null;
    //   // ... other user rules
    // }
  }
}
